/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: activity_tracking.proto */

#ifndef PROTOBUF_C_activity_5ftracking_2eproto__INCLUDED
#define PROTOBUF_C_activity_5ftracking_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct _RootContainer RootContainer;
typedef struct _Metadata Metadata;
typedef struct _DataContainer DataContainer;
typedef struct _SubDataContainer SubDataContainer;
typedef struct _DeviceInfo DeviceInfo;
typedef struct _SoftwareVersion SoftwareVersion;
typedef struct _Unknown01 Unknown01;
typedef struct _SummaryRecord SummaryRecord;
typedef struct _Record2 Record2;
typedef struct _TagValueContainer TagValueContainer;
typedef struct _ValueContainer ValueContainer;
typedef struct _Record3 Record3;
typedef struct _Record4 Record4;
typedef struct _Activity Activity;


/* --- enums --- */


/* --- messages --- */

struct _RootContainer {
  ProtobufCMessage base;
  Metadata *metadata;
  DataContainer *datacontainer;
};
#define ROOT_CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&root_container__descriptor) \
    , NULL, NULL }

struct _Metadata {
  ProtobufCMessage base;
  /*
   * always 0x1234DAEB
   */
  uint32_t unknown1;
  /*
   * always 0x00010100
   */
  uint32_t unknown2;
};
#define METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&metadata__descriptor) \
    , 0, 0 }

struct _DataContainer {
  ProtobufCMessage base;
  SubDataContainer *subdatacontainer;
};
#define DATA_CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_container__descriptor) \
    , NULL }

struct _SubDataContainer {
  ProtobufCMessage base;
  DeviceInfo *deviceinfo;
  SummaryRecord *summary;
  Record2 *record2;
  /*
   * Heart rate??
   */
  Record3 *record3;
  Record4 *record4;
};
#define SUB_DATA_CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sub_data_container__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }

struct _DeviceInfo {
  ProtobufCMessage base;
  char *devicename;
  uint32_t year;
  SoftwareVersion *softwareversion;
};
#define DEVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_info__descriptor) \
    , NULL, 0, NULL }

struct _SoftwareVersion {
  ProtobufCMessage base;
  int32_t majorversion;
  int32_t mediumversion;
  int32_t minorversion;
  Unknown01 *unknown01;
};
#define SOFTWARE_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&software_version__descriptor) \
    , 0, 0, 0, NULL }

struct _Unknown01 {
  ProtobufCMessage base;
  protobuf_c_boolean has_dummy;
  int32_t dummy;
};
#define UNKNOWN01__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unknown01__descriptor) \
    , 0, 0 }

/*
 *#################################################################################################
 * 4th level: Data Record
 *#################################################################################################
 */
struct _SummaryRecord {
  ProtobufCMessage base;
  /*
   * time since start of time
   */
  int32_t recordid;
  /*
   * Epoch time in seconds
   */
  int32_t time;
  /*
   * Difference between time and UTC in seconds (?)
   */
  int32_t timezone;
  /*
   * Interval of this measurement = 900s often     
   */
  int32_t interval;
  /*
   * Steps in this interval
   */
  int32_t steps;
  /*
   * How many seconds have been during an activity
   */
  int32_t activitytime;
  /*
   * Distance in meters in this interval
   */
  int32_t distance;
  /*
   * Calories in this interval
   */
  int32_t calories;
  /*
   * Calories from just existing
   */
  int32_t basecalories;
  protobuf_c_boolean has_unknown10;
  int32_t unknown10;
  int32_t unknown11;
};
#define SUMMARY_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&summary_record__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

struct _Record2 {
  ProtobufCMessage base;
  /*
   * Epoch time in seconds, 900 s interval = 15 min
   */
  uint32_t time;
  /*
   * Interval in seconds? 14400=4h
   */
  int32_t interval;
  size_t n_tagvalue;
  TagValueContainer **tagvalue;
  int32_t unknown1;
  int32_t unknown2;
  int32_t unknown3;
};
#define RECORD2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&record2__descriptor) \
    , 0, 0, 0,NULL, 0, 0, 0 }

struct _TagValueContainer {
  ProtobufCMessage base;
  int32_t tag;
  ValueContainer *valuecontainer;
};
#define TAG_VALUE_CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tag_value_container__descriptor) \
    , 0, NULL }

struct _ValueContainer {
  ProtobufCMessage base;
  int32_t value;
};
#define VALUE_CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value_container__descriptor) \
    , 0 }

struct _Record3 {
  ProtobufCMessage base;
  /*
   * Epoch time in seconds, 900 s interval = 15 min
   */
  uint32_t time;
  /*
   * Interval in seconds?? 14400=4h
   */
  int32_t interval;
  /*
   * Heartrate in bpm. This value is displayed by TomTom MySports
   */
  int32_t heartrate;
  /*
   * Some other heartrate value
   */
  int32_t value02;
  /*
   * ?
   */
  int32_t value03;
};
#define RECORD3__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&record3__descriptor) \
    , 0, 0, 0, 0, 0 }

struct _Record4 {
  ProtobufCMessage base;
  /*
   * Epoch time in seconds, 900 s interval = 15 min
   */
  uint32_t time;
  /*
   * Interval in seconds?? 14400=4h
   */
  int32_t interval;
  /*
   * 6 values in the message
   */
  size_t n_value;
  int32_t *value;
};
#define RECORD4__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&record4__descriptor) \
    , 0, 0, 0,NULL }

struct _Activity {
  ProtobufCMessage base;
  size_t n_rootcontainer;
  RootContainer **rootcontainer;
};
#define ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&activity__descriptor) \
    , 0,NULL }

/* RootContainer methods */
void root_container__init
    (RootContainer *message);
size_t root_container__get_packed_size
    (const RootContainer *message);
size_t root_container__pack
    (const RootContainer *message,
     uint8_t *out);
size_t root_container__pack_to_buffer
    (const RootContainer *message,
     ProtobufCBuffer *buffer);
RootContainer *
root_container__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void root_container__free_unpacked
    (RootContainer *message,
     ProtobufCAllocator *allocator);
/* Metadata methods */
void metadata__init
    (Metadata *message);
size_t metadata__get_packed_size
    (const Metadata *message);
size_t metadata__pack
    (const Metadata *message,
     uint8_t *out);
size_t metadata__pack_to_buffer
    (const Metadata *message,
     ProtobufCBuffer *buffer);
Metadata *
metadata__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void metadata__free_unpacked
    (Metadata *message,
     ProtobufCAllocator *allocator);
/* DataContainer methods */
void data_container__init
    (DataContainer *message);
size_t data_container__get_packed_size
    (const DataContainer *message);
size_t data_container__pack
    (const DataContainer *message,
     uint8_t *out);
size_t data_container__pack_to_buffer
    (const DataContainer *message,
     ProtobufCBuffer *buffer);
DataContainer *
data_container__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void data_container__free_unpacked
    (DataContainer *message,
     ProtobufCAllocator *allocator);
/* SubDataContainer methods */
void sub_data_container__init
    (SubDataContainer *message);
size_t sub_data_container__get_packed_size
    (const SubDataContainer *message);
size_t sub_data_container__pack
    (const SubDataContainer *message,
     uint8_t *out);
size_t sub_data_container__pack_to_buffer
    (const SubDataContainer *message,
     ProtobufCBuffer *buffer);
SubDataContainer *
sub_data_container__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void sub_data_container__free_unpacked
    (SubDataContainer *message,
     ProtobufCAllocator *allocator);
/* DeviceInfo methods */
void device_info__init
    (DeviceInfo *message);
size_t device_info__get_packed_size
    (const DeviceInfo *message);
size_t device_info__pack
    (const DeviceInfo *message,
     uint8_t *out);
size_t device_info__pack_to_buffer
    (const DeviceInfo *message,
     ProtobufCBuffer *buffer);
DeviceInfo *
device_info__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void device_info__free_unpacked
    (DeviceInfo *message,
     ProtobufCAllocator *allocator);
/* SoftwareVersion methods */
void software_version__init
    (SoftwareVersion *message);
size_t software_version__get_packed_size
    (const SoftwareVersion *message);
size_t software_version__pack
    (const SoftwareVersion *message,
     uint8_t *out);
size_t software_version__pack_to_buffer
    (const SoftwareVersion *message,
     ProtobufCBuffer *buffer);
SoftwareVersion *
software_version__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void software_version__free_unpacked
    (SoftwareVersion *message,
     ProtobufCAllocator *allocator);
/* Unknown01 methods */
void unknown01__init
    (Unknown01 *message);
size_t unknown01__get_packed_size
    (const Unknown01 *message);
size_t unknown01__pack
    (const Unknown01 *message,
     uint8_t *out);
size_t unknown01__pack_to_buffer
    (const Unknown01 *message,
     ProtobufCBuffer *buffer);
Unknown01 *
unknown01__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void unknown01__free_unpacked
    (Unknown01 *message,
     ProtobufCAllocator *allocator);
/* SummaryRecord methods */
void summary_record__init
    (SummaryRecord *message);
size_t summary_record__get_packed_size
    (const SummaryRecord *message);
size_t summary_record__pack
    (const SummaryRecord *message,
     uint8_t *out);
size_t summary_record__pack_to_buffer
    (const SummaryRecord *message,
     ProtobufCBuffer *buffer);
SummaryRecord *
summary_record__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void summary_record__free_unpacked
    (SummaryRecord *message,
     ProtobufCAllocator *allocator);
/* Record2 methods */
void record2__init
    (Record2 *message);
size_t record2__get_packed_size
    (const Record2 *message);
size_t record2__pack
    (const Record2 *message,
     uint8_t *out);
size_t record2__pack_to_buffer
    (const Record2 *message,
     ProtobufCBuffer *buffer);
Record2 *
record2__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void record2__free_unpacked
    (Record2 *message,
     ProtobufCAllocator *allocator);
/* TagValueContainer methods */
void tag_value_container__init
    (TagValueContainer *message);
size_t tag_value_container__get_packed_size
    (const TagValueContainer *message);
size_t tag_value_container__pack
    (const TagValueContainer *message,
     uint8_t *out);
size_t tag_value_container__pack_to_buffer
    (const TagValueContainer *message,
     ProtobufCBuffer *buffer);
TagValueContainer *
tag_value_container__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void tag_value_container__free_unpacked
    (TagValueContainer *message,
     ProtobufCAllocator *allocator);
/* ValueContainer methods */
void value_container__init
    (ValueContainer *message);
size_t value_container__get_packed_size
    (const ValueContainer *message);
size_t value_container__pack
    (const ValueContainer *message,
     uint8_t *out);
size_t value_container__pack_to_buffer
    (const ValueContainer *message,
     ProtobufCBuffer *buffer);
ValueContainer *
value_container__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void value_container__free_unpacked
    (ValueContainer *message,
     ProtobufCAllocator *allocator);
/* Record3 methods */
void record3__init
    (Record3 *message);
size_t record3__get_packed_size
    (const Record3 *message);
size_t record3__pack
    (const Record3 *message,
     uint8_t *out);
size_t record3__pack_to_buffer
    (const Record3 *message,
     ProtobufCBuffer *buffer);
Record3 *
record3__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void record3__free_unpacked
    (Record3 *message,
     ProtobufCAllocator *allocator);
/* Record4 methods */
void record4__init
    (Record4 *message);
size_t record4__get_packed_size
    (const Record4 *message);
size_t record4__pack
    (const Record4 *message,
     uint8_t *out);
size_t record4__pack_to_buffer
    (const Record4 *message,
     ProtobufCBuffer *buffer);
Record4 *
record4__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void record4__free_unpacked
    (Record4 *message,
     ProtobufCAllocator *allocator);
/* Activity methods */
void activity__init
    (Activity *message);
size_t activity__get_packed_size
    (const Activity *message);
size_t activity__pack
    (const Activity *message,
     uint8_t *out);
size_t activity__pack_to_buffer
    (const Activity *message,
     ProtobufCBuffer *buffer);
Activity *
activity__unpack
    (ProtobufCAllocator *allocator,
     size_t len,
     const uint8_t *data);
void activity__free_unpacked
    (Activity *message,
     ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RootContainer_Closure)
    (const RootContainer *message,
     void *closure_data);
typedef void (*Metadata_Closure)
    (const Metadata *message,
     void *closure_data);
typedef void (*DataContainer_Closure)
    (const DataContainer *message,
     void *closure_data);
typedef void (*SubDataContainer_Closure)
    (const SubDataContainer *message,
     void *closure_data);
typedef void (*DeviceInfo_Closure)
    (const DeviceInfo *message,
     void *closure_data);
typedef void (*SoftwareVersion_Closure)
    (const SoftwareVersion *message,
     void *closure_data);
typedef void (*Unknown01_Closure)
    (const Unknown01 *message,
     void *closure_data);
typedef void (*SummaryRecord_Closure)
    (const SummaryRecord *message,
     void *closure_data);
typedef void (*Record2_Closure)
    (const Record2 *message,
     void *closure_data);
typedef void (*TagValueContainer_Closure)
    (const TagValueContainer *message,
     void *closure_data);
typedef void (*ValueContainer_Closure)
    (const ValueContainer *message,
     void *closure_data);
typedef void (*Record3_Closure)
    (const Record3 *message,
     void *closure_data);
typedef void (*Record4_Closure)
    (const Record4 *message,
     void *closure_data);
typedef void (*Activity_Closure)
    (const Activity *message,
     void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor root_container__descriptor;
extern const ProtobufCMessageDescriptor metadata__descriptor;
extern const ProtobufCMessageDescriptor data_container__descriptor;
extern const ProtobufCMessageDescriptor sub_data_container__descriptor;
extern const ProtobufCMessageDescriptor device_info__descriptor;
extern const ProtobufCMessageDescriptor software_version__descriptor;
extern const ProtobufCMessageDescriptor unknown01__descriptor;
extern const ProtobufCMessageDescriptor summary_record__descriptor;
extern const ProtobufCMessageDescriptor record2__descriptor;
extern const ProtobufCMessageDescriptor tag_value_container__descriptor;
extern const ProtobufCMessageDescriptor value_container__descriptor;
extern const ProtobufCMessageDescriptor record3__descriptor;
extern const ProtobufCMessageDescriptor record4__descriptor;
extern const ProtobufCMessageDescriptor activity__descriptor;

PROTOBUF_C__END_DECLS

#endif  /* PROTOBUF_C_activity_5ftracking_2eproto__INCLUDED */
